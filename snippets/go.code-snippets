{
  "go-package": {
    "prefix": "package",
    "body": [
      "package ${1}",
      "  ${2}"
    ],
    "description": "declare go package"
  },
  "go-import-m": {
    "prefix": "import multiple",
    "body": [
      "import (",
      "  \"${1}\"",
      ")"
    ],
    "description": "multiple packages"
  },
  "go-import-s": {
    "prefix": "import single",
    "body": [
      "import \"${1}\""
    ],
    "description": "single packages"
  },
  "go-func": {
    "prefix": "func _err",
    "body": [
      "func ${1}() (_err err) {",
      "  ${2}",
      "}"
    ],
    "description": "function"
  },
  "go-struct": {
    "prefix": "type",
    "body": [
      "type ${1} struct {",
      "  ${2}",
      "}"
    ],
    "description": "struct"
  },
  "分隔线": {
    "prefix": [
      "fgx"
    ],
    "body": [
      "fmt.Printf(\"%s\\r\\n\", strings.Repeat(\"${1:=}\", ${2:30}))"
    ],
    "description": "分隔线"
  },
  "_err return": {
    "prefix": [
      "iferr"
    ],
    "body": [
      "if err != nil {",
      "  logger.Errorf(\"错误:%+v\", err)",
      "${1|  _err = err, |}",
      "${2|  return,  return nil, err|}",
      "}"
    ],
    "description": "打印错误"
  },
  "error printf": {
    "prefix": [
      "if _err"
    ],
    "body": [
      "if _err != nil {",
      "  logger.Errorf(\"错误:%+v\", _err)",
      "  return",
      "}"
    ],
    "description": "打印错误"
  },
  "err error": {
    "prefix": [
      "err"
    ],
    "body": [
      "err error"
    ],
    "description": "err error"
  },
  "_err error": {
    "prefix": [
      "_err"
    ],
    "body": [
      "_err error"
    ],
    "description": "_err error"
  },

  "匿名函数": {
    "prefix": [
      "defer"
    ],
    "body": [
      "defer func() {",
      "   $1",
      "}()"
    ],
    "description": "匿名函数"
  }
}