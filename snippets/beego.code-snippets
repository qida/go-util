{
  "Uid": {
    "scope": "go",
    "prefix": "beecuid",
    "body": [
      "// @Param   uid      query    int   false   \"Token(测试使用，生产环境忽略)\""
    ],
    "description": "Uid"
  },
  "Beego Controller Param2": {
    "scope": "go",
    "prefix": "bee2limit",
    "body": [
      "field := c.GetString(\"field\", \"\")",
      "order := c.GetString(\"order\", \"desc\")",
      "limit, _ := c.GetInt(\"limit\", 10)",
      "page, _ := c.GetInt(\"page\", 1)"
    ],
    "description": "分页"
  },
  "Beego Controller Param1": {
    "scope": "go",
    "prefix": "bee1limit",
    "body": [
      "// @Param  field  query  int false    \"排序字段\"",
      "// @Param  order  query  int false    \"排序方式 默认:asc  升序=asc 降序=desc\"",
      "// @Param  limit  query  int false    \"限制条数 默认:10\"",
      "// @Param  page  query  int false    \"页码  默认:1\""
    ],
    "description": "分页"
  },
  "go新加更新对像": {
    "scope": "go",
    "prefix": "beecnew",
    "body": [
      "// Get ...",
      "// @Title Get$2ByUidEx",
      "// @Description 添加更新$1信息",
      "// @Summary 添加更新$1信息",
      "// @Param uid    query  int false    \"Token(测试使用，生产环境忽略)\"",
      "// @Param body  body  models.$2 true    \"\"",
      "// @Success 201 {int} models.$2",
      "// @Failure 403 body is empty",
      "// @router /new [post]",
      "func (c *$2Controller) Add$2Ex() {",
      "  if id, err := extends.New$2(c.UserToken, c.Ctx.Input.RequestBody); err == nil {",
      "    c.Data[\"json\"] = c.Pack(nil, id)",
      "  } else {",
      "    if strings.Contains(err.Error(), \"1062\") {",
      "      c.Data[\"json\"] = c.Pack(err, fmt.Sprintf(\"值存在冲突。%s\", err.Error()))",
      "    } else {",
      "      c.Data[\"json\"] = c.Pack(err)",
      "    }",
      "  }",
      "  c.ServeJSON()",
      "}"
    ],
    "description": "c自由更新"
  },
  "没有数据": {
    "scope": "go",
    "prefix": "beemerrno",
    "body": [
      "if err == orm.ErrNoRows {",
      "  err = errors.New(\"没有数据\")",
      "}"
    ],
    "description": "没有数据"
  },
  "ORM联表查询": {
    "scope": "go",
    "prefix": "beemlb",
    "body": [
      "offset := limit * (page - 1)",
      "if offset < 0 {",
      "  err = errors.New(\"分页参数有误！\")",
      "  return",
      "}",
      "o := orm.NewOrm()",
      "qb, _ := orm.NewQueryBuilder(\"mysql\")",
      "var sqlStr string",
      "var num int64",
      "qb.Select(",
      "  \"count(*)\",",
      ").",
      "  From(\"$1\").",
      "  Where(\"$1.$4 = ? AND $1.$5 = ?\")",
      "sqlStr = qb.String()",
      "err = o.Raw(sqlStr, $4, $5).QueryRow(&count)",
      "if err != nil {",
      "  return",
      "}",
      "qb, _ = orm.NewQueryBuilder(\"mysql\")",
      "qb.Select(",
      "  \"$1.*\",",
      ").",
      "  From(\"$1\").",
      "  InnerJoin(\"$2\").On(\"$1.$3 = $2.$3\").",
      "  Where(\"$1.$4 = ? AND $1.$5 = ?\").",
      "  OrderBy(\"$1.sort_id\").Desc().",
      "  Limit(limit).Offset(offset)",
      "sqlStr = qb.String()",
      "num, err = o.Raw(sqlStr, $4, $5).QueryRows(&ml)",
      "if err != nil {",
      "  return",
      "}",
      "if num == 0 {",
      "  err = errors.New(\"没有数据\")",
      "  return",
      "}"
    ],
    "description": "ORM联表查询"
  },
  "新加更新对象": {
    "scope": "go",
    "prefix": "beemnew",
    "body": [
      "func New$1(token token.UserToken, byt_models []byte) ($2 int64, err error) {",
      "  var m models.$1",
      "  err = json.Unmarshal(byt_models, &m)",
      "  if err != nil {",
      "    return",
      "  }",
      "  valid := validation.Validation{}",
      "  b, err1 := valid.Valid(m)",
      "  if err1 != nil {",
      "    err = err1",
      "    return",
      "  }",
      "  if !b {",
      "    var strError string",
      "    for _, err := range valid.Errors {",
      "      strError += err.Key + err.Message + \"\\r\\n\"",
      "    }",
      "    err = errors.New(strError)",
      "    return",
      "  }",
      "  o := orm.NewOrm()",
      "  if m.$3 == 0 {",
      "    $2, err = o.Insert(&m) //建立",
      "  } else {",
      "    var realm map[string]interface{}",
      "    err = json.Unmarshal(byt_models, &realm)",
      "    if err != nil {",
      "      return",
      "    }",
      "    u := []string{}",
      "    for k := range realm {",
      "      u = append(u, k)",
      "    }",
      "    _, err = o.Update(&m, u...)",
      "  }",
      "  return",
      "}"
    ],
    "description": "新加更新对象"
  },
  "回滚": {
    "scope": "go",
    "prefix": "goormroll",
    "body": [
      "o := orm.NewOrm()",
      "defer func() {",
      "  err_p := recover()",
      "  if err == nil && err_p == nil {",
      "    o.Commit()",
      "  } else {",
      "    o.Rollback()",
      "    if err == nil && err_p != nil {",
      "      err = errors.New(fmt.Sprintf(\"%s\", err_p))",
      "    }",
      "  }",
      "}()",
      "err = o.Begin()",
      "if err != nil {",
      "  return",
      "}"
    ],
    "description": "回滚"
  },
  "去重更新": {
    "scope": "go",
    "prefix": "beesql",
    "body": [
      "UPDATE $2 d,",
      "(",
      "  SELECT",
      "    a.$3 ",
      "  FROM",
      "    $2 a,",
      "    ( SELECT $2, count($3) AS num FROM $2 WHERE $2 IS NOT NULL GROUP BY $2 HAVING count($3) >= 2 ) b ",
      "  WHERE",
      "    a.$2 = b.$2 ",
      "  ) c ",
      "  SET d.$4 = $5 ",
      "WHERE",
      "  d.$3 = c.$3;"
    ],
    "description": "去重更新"
  },
  "删除重复": {
    "scope": "go",
    "prefix": "beesqldelete",
    "body": [
      "DELETE $1",
      "FROM",
      " $1, ",
      " (",
      "  SELECT",
      "   min(id) id,",
      "   $2",
      "  FROM",
      "   $1",
      "  GROUP BY",
      "   $2",
      "  HAVING",
      "   count(*) > 1",
      " ) t2",
      "WHERE",
      " $1.$2 = t2.$2 ",
      "AND $1.id > t2.id;"
    ],
    "description": "删除重复"
  },
  "对象片段校验": {
    "scope": "go",
    "prefix": "govalidatian",
    "body": [
      "valid := validation.Validation{}",
      "b, err1 := valid.Valid(m)",
      "if err1 != nil {",
      "  err = err1",
      "  return",
      "}",
      "if !b {",
      "  var strError string",
      "  for _, err := range valid.Errors {",
      "    log.Println(err.Key, err.Message)",
      "    strError += err.Key + err.Message + \"\\r\\n\"",
      "  }",
      "  err = errors.New(strError)",
      "  return",
      "}"
    ],
    "description": "字段验证"
  },
  "分页参数判断": {
    "scope": "go",
    "prefix": "beemlimit",
    "body": [
      "offset := limit * (page - 1)",
      "if offset < 0 {",
      "  err = errors.New(\"分页参数有误！\")",
      "  return",
      "}"
    ],
    "description": "分页参数判断"
  },
  "分页查询": {
    "scope": "go",
    "prefix": "beeorm",
    "body": [
      "o := orm.NewOrm()",
      "count, err = o.QueryTable(new(models.$1)).Filter(\"$2\", $3).Count()",
      "if err != nil {",
      "  return",
      "}",
      "o.QueryTable(new(models.$1)).Filter(\"$2\", $3).",
      "  Limit(limit).",
      "  Offset(offset).",
      "  All(&ml)"
    ],
    "description": "分页查询"
  },
  "新建方法带分页排序": {
    "scope": "go",
    "prefix": "beemfo",
    "body": [
      "func Get$1List(token token.UserToken, limit, page int, field string, order string) (count int64, $4 []models.$1, err error) {",
      "  offset := limit * (page - 1)",
      "  if offset < 0 {",
      "    err = errors.New(\"分页参数有误！\")",
      "    return",
      "  }",
      "  o := orm.NewOrm()",
      "  qs := o.QueryTable(new(models.$1)).",
      "    Filter(\"$2\", $3)",
      "  count, err = qs.Count()",
      "  if err != nil {",
      "    return",
      "  }",
      "  if count == 0 {",
      "    err = errors.New(\"没有数据\")",
      "    return",
      "  }",
      "  if field != \"\" {",
      "    if order == \"asc\" {",
      "      qs = qs.OrderBy(field)",
      "    } else {",
      "      qs = qs.OrderBy(fmt.Sprintf(\"-%s\", field))",
      "    }",
      "  }",
      "  _, err = qs.Limit(limit).Offset(offset).",
      "    All(&$4)",
      "  return",
      "}"
    ],
    "description": "新建方法带分页排序"
  },
  "QD排序": {
    "scope": "go",
    "prefix": "beemfoqb",
    "body": [
      "if field == \"\" {",
      "  field = \"$1\"",
      "} else {",
      "  field = str.Camel2Case(field)",
      "}",
      "qb.OrderBy(field)",
      "if order == \"desc\" {",
      "  qb.Desc()",
      "}",
      "qb.Limit(limit).Offset(offset)"
    ],
    "description": "新建方法带分页排序"
  },
  "QS排序": {
    "scope": "go",
    "prefix": "beemfoqs",
    "body": [
      "if field == \"\" {",
      "  field = \"$1\"",
      "}",
      "if order == \"asc\" {",
      "  qs = qs.OrderBy(field)",
      "} else {",
      "  qs = qs.OrderBy(fmt.Sprintf(\"-%s\", field))",
      "}",
      "qs.Limit(limit).Offset(offset)"
    ],
    "description": "新建方法带分页排序"
  },
  "年月时间转换": {
    "scope": "go",
    "prefix": "beecym",
    "body": [
      "var time_count time.Time",
      "if year_month != \"\" {",
      "  time_count, err = time.ParseInLocation(\"2006-01\", year_month, time.Local)",
      "  if err != nil {",
      "    err = errors.New(\"时间参数有误！\")",
      "    return",
      "  }",
      "} else {",
      "  time_count, err = time.ParseInLocation(\"2006-01\", time.Now().Format(\"2006-01\"), time.Local)",
      "}"
    ],
    "description": "年月时间转换"
  },
  "获取对象列表1": {
    "scope": "go",
    "prefix": "beeclist",
    "body": [
      "// Get$2List ...",
      "// @Title Get List",
      "// @Description 获取$1列表",
      "// @Summary 获取$1列表",
      "// @Param uid   query      int false   \"Token(测试使用，生产环境忽略)\"",
      "// @Param limit query      int false   \"限制条数 默认:10\"",
      "// @Param page  query      int false   \"页码\"",
      "// @Param field query      int false   \"排序字段\"",
      "// @Param order query      int false   \"排序方式 默认:asc  升序=asc 降序=desc\"",
      "// @Success 200 {object} models.$2",
      "// @Failure 403 :id is empty",
      "// @router /list [get]",
      "func (c *$2Controller) GetList$2Ex() {",
      "  limit, _ := c.GetInt(\"limit\", 10)",
      "  page, _ := c.GetInt(\"page\", 1)",
      "  field := c.GetString(\"field\", \"\")",
      "  order := c.GetString(\"order\", \"desc\")",
      "  count, v, err := extends.GetList$2(limit, page, field, order)",
      "  if err != nil {",
      "    c.Data[\"json\"] = c.Pack(err)",
      "  } else {",
      "    c.Data[\"json\"] = c.Pack(err, v, count)",
      "  }",
      "  c.ServeJSON()",
      "}"
    ],
    "description": "获取对象列表"
  },
  "获取对象列表2": {
    "scope": "go",
    "prefix": "beemlist",
    "body": [
      "func GetList$1(limit, page int, field, order string) (count int64, $2s []models.$1, err error) {",
      "  offset := limit * (page - 1)",
      "  if offset < 0 {",
      "    err = errors.New(\"分页参数有误！\")",
      "    return",
      "  }",
      "  o := orm.NewOrm()",
      "  qb := o.QueryTable(new(models.$1)).",
      "    Filter(\"Status$3__gt\", consts.Status$3删除)",
      "  count, err = qb.Count()",
      "  if err != nil {",
      "    return",
      "  }",
      "  if count == 0 {",
      "    err = errors.New(\"没有数据\")",
      "    return",
      "  }",
      "  if field != \"\" {",
      "    if order == \"asc\" {",
      "      qb.OrderBy(field)",
      "    } else {",
      "      qb.OrderBy(fmt.Sprintf(\"-%s\", field))",
      "    }",
      "  }",
      "  _, err = qb.Limit(limit).Offset(offset).",
      "    All(&$2s)",
      "  return",
      "}"
    ],
    "description": "获取对象列表"
  },
  "基本查询": {
    "scope": "go",
    "prefix": "beemquery",
    "body": [
      "o := orm.NewOrm()",
      "var $4 models.$1",
      "_, err = o.QueryTable(new(models.$1)).",
      "  Filter(\"$2\", $3).",
      "  One(&$4).",
      "  All(&$4).",
      "  Update(orm.Params{\"$5\": $6})",
      "return"
    ],
    "description": "获取对象列表"
  },
  "起始日期1": {
    "scope": "go",
    "prefix": "beecqsrq1",
    "body": [
      "// @Param time_start    query  string false    \"起始时间\"",
      "// @Param time_end      query  string false    \"结束时间\""
    ],
    "description": "起始日期1"
  },
  "起始日期2": {
    "scope": "go",
    "prefix": "beecqsrq2",
    "body": [
      "time_start_str := c.GetString(\"time_start\", \"\")",
      "time_end_str := c.GetString(\"time_end\", \"\")",
      "var time_start, time_end time.Time",
      "if time_start_str != \"\" || time_end_str != \"\" {",
      "  var err1 error",
      "  time_start, err1 = time.ParseInLocation(\"2006-01-02\", time_start_str, time.Local)",
      "  if err1 != nil {",
      "    c.Data[\"json\"] = c.Pack(err1)",
      "    c.ServeJSON()",
      "    return",
      "  }",
      "  time_end, err1 = time.ParseInLocation(\"2006-01-02\", time_end_str, time.Local)",
      "  if err1 != nil {",
      "    c.Data[\"json\"] = c.Pack(err1)",
      "    c.ServeJSON()",
      "    return",
      "  }",
      "  if !time_end.IsZero() {",
      "    time_end = time_end.AddDate(0, 0, 1)",
      "  }",
      "} "
    ],
    "description": "起始日期2"
  },
  "代码测试": {
    "scope": "go",
    "prefix": "beemain",
    "body": [
      "package main",
      "",
      "import (",
      "  \"fmt\"",
      "",
      "  \"github.com/astaxie/beego/orm\"",
      "  _ \"github.com/go-sql-driver/mysql\"",
      ")",
      "",
      "func init() {",
      "  orm.RegisterDataBase(\"default\", \"mysql\", \"$1:$2@tcp(root.sunqida.cn:3306)/$3?charset=utf8mb4&parseTime=true&loc=Local\")",
      "  orm.RegisterModel(new($4))",
      "  orm.Debug = true",
      "}",
      "",
      "type $4 struct {",
      "  Id int `orm:\"column(id);auto\"`",
      "}",
      "",
      "func (t *$4) TableName() string {",
      "  return \"$5\"",
      "}",
      "",
      "func main() {",
      "  qb, _ := orm.NewQueryBuilder(\"mysql\")",
      "  qb.Select(",
      "    \"*\",",
      "  ).",
      "    From(\"$5\")",
      "  sqlStr := qb.String()",
      "  o := orm.NewOrm()",
      "  var lds []$4",
      "  _, err := o.Raw(sqlStr).QueryRows(&lds)",
      "  if err != nil {",
      "    return",
      "  }",
      "  fmt.Printf(\"%d\", len(lds))",
      "  return",
      "}"
    ],
    "description": "程序测试main"
  }
}