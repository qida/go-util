{
  "thrift Server": {
    "scope": "go",
    "prefix": "t.server",
    "body": [
      "handler := &FormatDataImpl{}",
      "processor := example.NewFormatDataProcessor(handler)",
      "serverTransport, err := thrift.NewTServerSocket(HOST + \":\" + PORT)",
      "if err != nil {",
      "  log.Fatalln(\"Error:\", err)",
      "}",
      "transportFactory := thrift.NewTFramedTransportFactoryConf(thrift.NewTTransportFactory(), nil)",
      "protocolFactory := thrift.NewTBinaryProtocolFactoryConf(nil)",
      "server := thrift.NewTSimpleServer4(processor, serverTransport, transportFactory, protocolFactory)",
      "fmt.Println(\"Running at:\", HOST+\":\"+PORT)",
      "server.Serve()"
    ],
    "description": "thrift server"
  },
  "完整的Thrift服务": {
    "scope": "go",
    "prefix": "t.server",
    "body": [
      "// 运行Thrift服务",
      "func RunThriftServer() {",
      "//需要注册的服务",
      " handler := handles.ThriftServer{}",
      " processor := services.NewServicesProcessor(&handler)",
      " conf := &thrift.TConfiguration{",
      "   ConnectTimeout:     time.Duration(TimeOutConn) * time.Millisecond,",
      "   SocketTimeout:      time.Duration(TimeOutSocket) * time.Millisecond,",
      "   TBinaryStrictRead:  thrift.BoolPtr(true),",
      "   TBinaryStrictWrite: thrift.BoolPtr(true),",
      " }",
      " serverTransport, err := thrift.NewTServerSocket(net.JoinHostPort(\"\", Port))",
      " if err != nil {",
      "   logger.Errorf(\"NewTServerSocket: %s\", err.Error())",
      "   if global.IS_DEV {",
      "     panic(err)",
      "   }",
      " }",
      " // transportFactory := thrift.NewTFramedTransportFactoryConf(thrift.NewTTransportFactory(), conf)",
      " transportFactory := thrift.NewTBufferedTransportFactory(8 * 1024) //8KB",
      " protocolFactory := thrift.NewTBinaryProtocolFactoryConf(conf)",
      " server := thrift.NewTSimpleServer4(processor, serverTransport, transportFactory, protocolFactory)",
      " logger.Infof(\"Thrift服务端口: %v\", Port)",
      " //启动服务",
      " go func() {",
      "   err := server.Serve()",
      "   if err != nil {",
      "     if global.IS_DEV {",
      "       panic(err)",
      "     }",
      "   }",
      " }()",
      " //注册",
      " //global.SM.Register(*hostPort, Name, \"test_tag\")",
      " quit := make(chan os.Signal, 1)",
      " signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)",
      " //退出",
      " <-quit",
      " logger.Info(\"注销\")",
      " //global.SM.UnRegister()",
      "}"
    ],
    "description": "完整的Thrift服务"
  },
  "thrift Client": {
    "scope": "go",
    "prefix": "t.client",
    "body": [
      "tSocket := thrift.NewTSocketConf(",
      "net.JoinHostPort(HOST, PORT),",
      "&thrift.TConfiguration{",
      "  ConnectTimeout: time.Second, // Use 0 for no timeout",
      "  SocketTimeout:  time.Second, // Use 0 for no timeout",
      "},",
      ")",
      "transportFactory := thrift.NewTFramedTransportFactoryConf(thrift.NewTTransportFactory(), nil)",
      "transport, err := transportFactory.GetTransport(tSocket)",
      "fmt.Println(\"err\", err)",
      "protocolFactory := thrift.NewTBinaryProtocolFactoryConf(nil)",
      "",
      "client := example.NewFormatDataClientFactory(transport, protocolFactory)",
      "",
      "if err := transport.Open(); err != nil {",
      "  log.Fatalln(\"Error opening:\", HOST+\":\"+PORT)",
      "}",
      "defer transport.Close()",
      "",
      "data := example.Data{Text: \"hello,world!\"}",
      "d, err := client.DoFormat(context.Background(), &data)",
      "fmt.Println(d.Text)"
    ],
    "description": "thrift client"
  },
  "完整Thrift客户端": {
    "scope": "go",
    "prefix": "t.client",
    "body": [
      "package utils",
      "",
        "import (",
        "  \"net\"",
        "  \"time\"",
        "",
        "  \"gobase/logger\"",
        "  \"gobase/thrift_work_flow/thrift_device_centre/gen-go/device_manager_center\"",
        "  \"gobase/thrift_work_flow/thrift_label_center/gen-go/services\"",
        "  structs \"gobase/thrift_work_flow/thrift_struct_center/gen-go/thrift\"",
        "",
        "  \"github.com/apache/thrift/lib/go/thrift\"",
        ")",
        "",
        "type IClient interface {",
        "  GetLabelClient() (*services.ServicesClient, error)",
        "  GetDeviceClient() (*device_manager_center.DeviceManagerCenterClient, error)",
        "  GetStructClient() (*structs.MediaServerClient, error)",
        "  Close() error",
        "}",
        "",
        "type Thrift struct {",
        "  Client *Client",
        "}",
        "",
        "type Client struct {",
        "  Socket       *thrift.TSocket",
        "  Transport    thrift.TTransport",
        "  ProtoFactory thrift.TProtocolFactory",
        "}",
        "",
        "/*********************************初始链接********************************************/",
        "func NewClient(host, port string, time_out_conn, time_out_socket time.Duration) IClient {",
        "  conf := &thrift.TConfiguration{",
        "    ConnectTimeout:     time_out_conn,",
        "    SocketTimeout:      time_out_socket,",
        "    TBinaryStrictRead:  thrift.BoolPtr(true),",
        "    TBinaryStrictWrite: thrift.BoolPtr(true),",
        "  }",
        "  socket := thrift.NewTSocketConf(net.JoinHostPort(host, port), conf)",
        "  // transFactory := thrift.NewTFramedTransportFactoryConf(thrift.NewTTransportFactory(), conf)",
        "  transFactory := thrift.NewTBufferedTransportFactory(8 * 1024) //8KB",
        "  transport, _ := transFactory.GetTransport(socket)",
        "  protoFactory := thrift.NewTBinaryProtocolFactoryConf(conf)",
        "  return &Thrift{Client: &Client{",
        "    Socket:       socket,",
        "    Transport:    transport,",
        "    ProtoFactory: protoFactory,",
        "  }}",
        "}",
        "",
        "/*********************************标签中心********************************************/",
        "func (t *Thrift) GetLabelClient() (*services.ServicesClient, error) {",
        "  client := services.NewServicesClientFactory(t.Client.Transport, t.Client.ProtoFactory)",
        "  if err := t.Client.Transport.Open(); err != nil {",
        "    logger.Errorf(\"发起链接 错误 %s\", err.Error())",
        "    return nil, err",
        "  }",
        "  return client, nil",
        "}",
        "",
        "/*********************************设备中心********************************************/",
        "func (t *Thrift) GetDeviceClient() (*device_manager_center.DeviceManagerCenterClient, error) {",
        "  client := device_manager_center.NewDeviceManagerCenterClientFactory(t.Client.Transport, t.Client.ProtoFactory)",
        "  if err := t.Client.Transport.Open(); err != nil {",
        "    logger.Errorf(\"打开设备中心错误信息%v\", err)",
        "    return nil, err",
        "  }",
        "  return client, nil",
        "}",
        "",
        "/*********************************结构中心********************************************/",
        "func (t *Thrift) GetStructClient() (*structs.MediaServerClient, error) {",
        "  client := structs.NewMediaServerClientFactory(t.Client.Transport, t.Client.ProtoFactory)",
        "  if err := t.Client.Transport.Open(); err != nil {",
        "    logger.Errorf(\"打开结构化中心错误信息%v\", err)",
        "    return nil, err",
        "  }",
        "  return client, nil",
        "}",
        "",
        "/*********************************释放链接********************************************/",
        "func (t *Thrift) Close() (_err error) {",
        "  if t.Client == nil {",
        "    return",
        "  }",
        "  _err = t.Client.Transport.Close()",
        "  if _err != nil {",
        "    logger.Errorf(\"Client Transport.Close() %s\", _err.Error())",
        "  }",
        "  return",
        "}",
        "",
        "/*         使用DEMO",
        "",
        "client := utils.NewClient(Host, Port,",
        "  time.Duration(TimeOutConn)*time.Second,",
        "  time.Duration(TimeOutSocket)*time.Second)//初始化",
        "",
        "services, err := client.GetXXXClient()//获取服务对象",
        "if err != nil {",
        "  _err = err",
        "  return",
        "}",
        "defer client.Close()//释放链接",
        "",
        "_err = services.BaseImageFileFromSlave(context.Background(),//调用方法",
        "  &base_image.ReqBaseImageFile{",
        "    ImageName:    req.ImageName,",
        "    ImageBinary: req.ImageBinary,",
        "  })",
        "if _err != nil {",
        "",
        "}",
        "*/"
    ],
    "description": "完整Thrift客户端"
  },
  
  



  "t.ife": {
    "prefix": ["t.ife"],
    "body": [
      "if err != nil {",
      "  _err = err",
      "  return",
      "}"
    ],
    "description": "if err != nil return _err"
  },
  "测试用例": {
    "scope": "go",
    "prefix": "t.test",
    "body": [
      "{",
      "  name: \"测试_$1\",",
			"  tr:   new(ThriftServer)",
      "  args: args{",
      "    ctx: context.Background(),",
      "    req: $2,",
      "    wantErr: false,",
      "  },",
      "},"
    ],
    "description": "测试用例"
  }
}